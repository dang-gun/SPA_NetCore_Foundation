<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SPA_NetCore_Foundation06</name>
    </assembly>
    <members>
        <member name="T:SPA_NetCore_Foundation.Controllers.SignController">
            <summary>
            사인 관련(인,아웃,조인)
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.SignIn(System.String,System.String)">
            <summary>
            사인인 시도
            </summary>
            <param name="sEmail"></param>
            <param name="sPW"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.SignOut(System.String)">
            <summary>
            지정된 토큰을 찾아 지운다.
            </summary>
            <param name="sRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.RefreshToAccess(System.String)">
            <summary>
            리플레시 토큰을 이용하여 엑세스토큰을 갱신한다.
            </summary>
            <param name="sRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.AccessToUserInfo">
            <summary>
            엑세스토큰을 이용하여 유저 정보를 받는다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SPA_NetCore_Foundation.Controllers.TestController">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.TestController.Call">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.TestController.Test01(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.TestController.Test02(System.Int32)">
            <summary>
            
            </summary>
            <param name="nData"></param>
            <returns></returns>
        </member>
        <member name="T:SPA_NetCore_Foundation.Global.GlobalStatic">
            <summary>
            전역변수 모음
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Global.GlobalStatic.TokenProc">
            <summary>
            토큰 처리관련
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Global.GlobalStatic.DBType">
            <summary>
            DB 타입
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Global.GlobalStatic.DBString">
            <summary>
            DB 컨낵션 스트링 저장
            </summary>
        </member>
        <member name="T:SPA_NetCore_Foundation.Model.TestModel01">
            <summary>
            테스트용 01
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel01.nTest">
            <summary>
            
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel01.sTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Model.TestModel01.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:SPA_NetCore_Foundation.Model.TestModel02">
            <summary>
            테스트용 02
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel02.nTest001">
            <summary>
            
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel02.sTest002">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Model.TestModel02.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:SPA_NetCore_Foundation.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Startup.AuthUrl">
            <summary>
            인증서버 주소
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:SPA_NetCore_Foundation.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:SwaggerAssist.AuthenticationRequirementsOperationFilter">
            <summary>
            https://github.com/domaindrivendev/Swashbuckle.AspNetCore
            </summary>
        </member>
        <member name="M:SwaggerAssist.AuthenticationRequirementsOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            스웨거용 bearer 체크 필터
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:IdentityServer4_Custom.IdentityServer4.AuthRequest.MyExtensionGrantValidator">
            <summary>
            http://docs.identityserver.io/en/latest/topics/extension_grants.html
            </summary>
        </member>
        <member name="P:IdentityServer4_Custom.IdentityServer4.AuthRequest.MyExtensionGrantValidator.GrantType">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.AuthRequest.MyExtensionGrantValidator.ValidateAsync(IdentityServer4.Validation.ExtensionGrantValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.IdentityServer4.Config">
            <summary>
            0. 'IdentityServer4' 설정
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.Config.GetIdentityResources">
            <summary>
            신원 자원
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.Config.GetApiResources">
            <summary>
            API의 인증 범위를 정의한다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.Config.GetClients">
            <summary>
            클라이언트 접근 범위를 설정한다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.IdentityServer4.TokenProcess">
            <summary>
            토큰 처리 관련 기능들
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.IdentityServer4.TokenProcess.hcAuthClient">
            <summary>
            인증에 사용할  http클라이언트
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.IdentityServer4.TokenProcess.sIdentityServer4_Url">
            <summary>
            IdentityServer4로 구현된 서버 주소
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="sAuthUrl"></param>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.RequestTokenAsync(System.String,System.String)">
            <summary>
            인증서버에 인증을 요청한다.
            </summary>
            <param name="sID"></param>
            <param name="sPassword"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.RefreshTokenAsync(System.String)">
            <summary>
            액세스 토큰 갱신
            </summary>
            <param name="sRefreshToken">리플레시토큰</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.RevocationTokenAsync(System.String)">
            <summary>
            지정된 토큰 제거
            </summary>
            <param name="sRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.UserInfoAsync(System.String)">
            <summary>
            엑세스토큰을 이용하여 유저 정보를 받는다.
            </summary>
            <param name="sAccessToken"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.CustomProfileService">
            <summary>
            4. 'IdentityServerBuilder'에 전달될 프로필 서비스를 만든다.
            유효성 검증이 된경우 토큰에 정보나 요구사항을 추가한다.
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.UserServices.CustomProfileService.Logger">
            <summary>
            로거
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.UserServices.CustomProfileService._userRepository">
            <summary>
            전달받은 유저 저장소
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomProfileService.#ctor(IdentityServer4_Custom.UserServices.IUserRepository,Microsoft.Extensions.Logging.ILogger{IdentityServer4_Custom.UserServices.CustomProfileService})">
            <summary>
            커스텀 프로필 서비스 생성
            </summary>
            <param name="userRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomProfileService.GetProfileDataAsync(IdentityServer4.Models.ProfileDataRequestContext)">
            <summary>
            서브젝트아이디에 해당하는 정보를 만든다.
            주의 : 직접 참조만 없을뿐이지 실제론 사용된다.
            경고 : CS1998
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomProfileService.IsActiveAsync(IdentityServer4.Models.IsActiveContext)">
            <summary>
            전달받은 서브젝트아이디가 있는지 확인한다.
            주의 : 직접 참조만 없을뿐이지 실제론 사용된다.
            경고 : CS1998
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.CustomResourceOwnerPasswordValidator">
            <summary>
            5. 전달된 유저정보 유효성 검사
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomResourceOwnerPasswordValidator.#ctor(IdentityServer4_Custom.UserServices.IUserRepository)">
            <summary>
            생성
            </summary>
            <param name="userRepository"></param>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomResourceOwnerPasswordValidator.ValidateAsync(IdentityServer4.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            유효성 검사
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.IUserRepository">
            <summary>
            2. 유저 저장소 인터페이스
            'IdentityServerBuilder'에 전달될 인터페이스
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.IUserRepository.ValidateCredentials(System.String,System.String)">
            <summary>
            자격 증명 확인
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.IUserRepository.FindById(System.Int32)">
            <summary>
            아이디로 유저를 찾는다.
            </summary>
            <param name="nID"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.IUserRepository.FindByEmail(System.String)">
            <summary>
            이메일로 유저를 찾는다.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.UserRepository">
            <summary>
            3. 유저 저장소
            유저 정보 및 데이터 엑세스 기능
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.ValidateCredentials(System.String,System.String)">
            <summary>
            인증정보가 확인
            </summary>
            <param name="sEmail"></param>
            <param name="sPassword"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.FindById(System.Int32)">
            <summary>
            아이디 검색
            </summary>
            <param name="nID"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.FindByEmail(System.String)">
            <summary>
            이름 검색
            </summary>
            <param name="sEmail"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.UserServices.ClaimModel">
            <summary>
            클라이언트 정보가 들어있는 Claims 모델
            IdentityServer4
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.client_id">
            <summary>
            클라이언트 아이디
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.auth_time">
            <summary>
            권한 유효 시간
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.id">
            <summary>
            아이디
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.id_int">
            <summary>
            아이디 - long 타입
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.email">
            <summary>
            이메일.
            인증에 사용한 이메일 정보.
            이메일이 아닌경우 고유문자열
            </summary>
        </member>
        <member name="M:IdentityServer4.UserServices.ClaimModel.#ctor">
            <summary>
            기본값으로 생성
            </summary>
        </member>
        <member name="M:IdentityServer4.UserServices.ClaimModel.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            인증 서버에서 넘어온 정보로 생성
            </summary>
            <param name="claims"></param>
        </member>
        <member name="M:IdentityServer4.UserServices.ClaimModel.Set(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            인증 서버에서 넘어온 정보로 초기화
            </summary>
            <param name="claims"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CustomIdentityServerBuilderExtensions">
            <summary>
            6. 'Microsoft.Extensions.DependencyInjection'에 확장 메소드 추가
            'IdentityServerBuilder'에 추가할 종속성을 정의 한다.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CustomIdentityServerBuilderExtensions.AddCustomUserStore(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            저장소에 커스텀 유저를 추가한다.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:SPA_NetCore_Foundation06.Migrations.Initialize">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation06.Migrations.Initialize.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation06.Migrations.Initialize.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation06.Migrations.Initialize.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:SPA_NetCore_Foundation06.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation06.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation06.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ModelDB.SpaNetCoreFoundationContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModelDB.SpaNetCoreFoundationContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.User">
            <summary>
            유저 사인인 정보
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.UserSignIn">
            <summary>
            사용자 사인인 리스트
            </summary>
        </member>
        <member name="M:ModelDB.SpaNetCoreFoundationContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:ModelDB.User">
            <summary>
            유저 사인인 정보.
            유저기준 정보임.
            </summary>
        </member>
        <member name="P:ModelDB.User.idUser">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.User.SignEmail">
            <summary>
            사인인에 사용하는 이메일
            </summary>
        </member>
        <member name="P:ModelDB.User.Password">
            <summary>
            비밀번호
            </summary>
        </member>
        <member name="T:ModelDB.UserSignIn">
            <summary>
            유저 사인인 한 유저의 정보.
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.idUserSignIn">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.idUser">
            <summary>
            연결된 User.idUser
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.RefreshToken">
            <summary>
            리플레시 토큰
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.SignInDate">
            <summary>
            직접 로그인한 시간
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.RefreshDate">
            <summary>
            토큰 갱신 시간
            </summary>
        </member>
        <member name="T:ApiModel.ApiResultBaseModel">
            <summary>
            API 결과 공통 베이스.
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultBaseModel.InfoCode">
            <summary>
            실패시 전달한 코드
            0 : 성공.
            다른 값은 모두 실패
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultBaseModel.Message">
            <summary>
            전달할 메시지
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultBaseModel.SuccessString">
            <summary>
            성공했을때 문자
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.#ctor">
            <summary>
            기본 생성.
            InfoCode가 "0"로 초기화됨
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.#ctor(System.String,System.String)">
            <summary>
            인포코드와 메시지를 넣고 생성
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.Reset">
            <summary>
            성공으로 초기화한다.
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.TypeSet(ApiModel.ApiResultType)">
            <summary>
            타입 세팅
            </summary>
            <param name="typeApiResult"></param>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.IsSuccess">
            <summary>
            InfoCode값이 성공값인지 여부
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApiModel.ApiResultFailModel">
            <summary>
            api 실패시 전달할 모델(자바스크립 전달용)
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultFailModel.#ctor">
            <summary>
            기본 초기화
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultFailModel.#ctor(System.String,System.String)">
            <summary>
            인포코드와 메시지를 넣고 생성
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="T:ApiModel.ApiResultObjectModel">
            <summary>
            스웨거에 노출시키지 않고 모델을 리턴할때 사용한다.
            테스트용으로 사용해도된다.(매번 새로운 모델을 만들기 힘들기 때문)
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultObjectModel.ResultObject">
            <summary>
            전달할 오브젝트
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultObjectModel.#ctor">
            <summary>
            기본 생성
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultObjectModel.#ctor(System.Object)">
            <summary>
            리턴할 모델 지정하여 생성
            </summary>
            <param name="objResult"></param>
        </member>
        <member name="M:ApiModel.ApiResultObjectModel.#ctor(System.String,System.String)">
            <summary>
            인포코드와 메시지를 넣고 생성
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="T:ApiModel.ApiResultReady">
            <summary>
            api요청을 처리할때 요청결과처리를 공통화 하는 클래스.
            ApiResultFailModel를 공통으로 리턴하기 위해 베이스를 가지고 있다.
            결과 출력용으로 데이터는 외부로 부터 받아야 한다.
            외부에서는 ToResult를 이용하여 API 전달용 개체를 받는다.
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.ThisCB">
            <summary>
            컨트롤러베이스의 기능을 쓰기위한 개체
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.ResultObject">
            <summary>
            전달받은 결과 오브젝트
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.Success">
            <summary>
            성공 여부.
            알수 없는 에러가 났을때 처리하기위한 용도.
            알수 있는 에러는 이값을을 true로 해둔다.
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.InfoCode">
            <summary>
            실패시 전달한 코드
            0 : 성공.
            다른 값은 모두 실패
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.Message">
            <summary>
            전달할 메시지
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultReady.#ctor(Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            API의 처음부분에서 선언한다.
            'ApiResultBaseModel'로 생성합니다.
            </summary>
            <param name="cbThis">컨트롤러 기능을 사용하기위한 인스턴스</param>
        </member>
        <member name="M:ApiModel.ApiResultReady.#ctor(Microsoft.AspNetCore.Mvc.ControllerBase,ApiModel.ApiResultBaseModel)">
            <summary>
            API의 처음부분에서 선언한다.
            </summary>
            <param name="cbThis">컨트롤러 기능을 사용하기위한 인스턴스</param>
            <param name="arModel">리턴에 사용할 모델</param>
        </member>
        <member name="M:ApiModel.ApiResultReady.ApiResultInfoSet(System.String,System.String)">
            <summary>
            Api 결과 정보 저장
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="M:ApiModel.ApiResultReady.IsSuccess">
            <summary>
            InfoCode값이 성공값인지 여부
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiModel.ApiResultReady.ToResult">
            <summary>
            API끝에서 호출한다.
            ApiResult를 생성하여 리턴해 준다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiModel.ApiResultReady.ToResult(System.Object)">
            <summary>
            API끝에서 호출하여 'ObjectResult'를 생성하여 리턴해 준다.
            만들어지는 결과의 ApiResultBaseModel데이터는 this 기준이다.
            </summary>
            <param name="objResultData">전달할 모델</param>
            <returns></returns>
        </member>
        <member name="T:ApiModel.ApiResultType">
            <summary>
            자주쓰는 API 결과 타입
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultType.None">
            <summary>
            성공
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultType.PermissionCheckError">
            <summary>
            권한 체크중 오류 발생
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultType.TargetFindError">
            <summary>
            대상을 찾지 못했다.
            </summary>
        </member>
        <member name="T:WebApiAuth.Model.Sign.SignInResultModel">
            <summary>
            사인인 성공시 전달할 모델
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.idUser">
            <summary>
            유저의 고유 아이디
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.Email">
            <summary>
            이메일
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.ViewName">
            <summary>
            표시 이름
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.access_token">
            <summary>
            엑세스 토큰
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.refresh_token">
            <summary>
            리플레시 토큰
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.SignInResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:WebApiAuth.Model.Sign.SignInSimpleResultModel">
            <summary>
            사인인 성공시 전달할 모델
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInSimpleResultModel.idUser">
            <summary>
            유저의 고유 아이디
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInSimpleResultModel.Email">
            <summary>
            이메일
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInSimpleResultModel.ViewName">
            <summary>
            표시 이름
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.SignInSimpleResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:WebApiAuth.Model.Sign.UserAuthModel">
            <summary>
            IdentityServer4 인증 정보를 만들기 위한 모델
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.UserAuthModel.idUser">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.UserAuthModel.SignEmail">
            <summary>
            사인인에 사용하는 이메일
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.UserAuthModel.#ctor">
            <summary>
            기본 값으로 생성
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.UserAuthModel.#ctor(ModelDB.User)">
            <summary>
            유저 정보를 이용하여 생성
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:WebApiAuth.Model.Sign.UserAuthModel.ManagerAuth_Set(ModelDB.User)">
            <summary>
            유저 정보 저장
            </summary>
            <param name="user"></param>
        </member>
    </members>
</doc>
