<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SPA_NetCore_Foundation08</name>
    </assembly>
    <members>
        <member name="T:SPA_NetCore_Foundation08.Migrations.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation08.Migrations.Initialize.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation08.Migrations.Initialize.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            
            </summary>
            <param name="migrationBuilder"></param>
        </member>
        <member name="T:SPA_NetCore_Foundation.Controllers.SignController">
            <summary>
            사인 관련(인,아웃,조인)
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.SignIn(System.String,System.String)">
            <summary>
            사인인 시도
            </summary>
            <param name="sEmail"></param>
            <param name="sPW"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.SignOut(System.String)">
            <summary>
            지정된 토큰을 찾아 지운다.
            </summary>
            <param name="sRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.RefreshToAccess(System.String)">
            <summary>
            리플레시 토큰을 이용하여 엑세스토큰을 갱신한다.
            </summary>
            <param name="sRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.SignController.AccessToUserInfo">
            <summary>
            엑세스토큰을 이용하여 유저 정보를 받는다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SPA_NetCore_Foundation.Controllers.TestController">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.TestController.Call">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.TestController.Test01(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:SPA_NetCore_Foundation.Controllers.TestController.Test02(System.Int32)">
            <summary>
            
            </summary>
            <param name="nData"></param>
            <returns></returns>
        </member>
        <member name="T:SPA_NetCore_Foundation.Global.GlobalStatic">
            <summary>
            전역변수 모음
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Global.GlobalStatic.TokenProc">
            <summary>
            토큰 처리관련
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Global.GlobalStatic.DBType">
            <summary>
            DB 타입
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Global.GlobalStatic.DBString">
            <summary>
            DB 컨낵션 스트링 저장
            </summary>
        </member>
        <member name="T:SPA_NetCore_Foundation.Model.TestModel01">
            <summary>
            테스트용 01
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel01.nTest">
            <summary>
            
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel01.sTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Model.TestModel01.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:SPA_NetCore_Foundation.Model.TestModel02">
            <summary>
            테스트용 02
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel02.nTest001">
            <summary>
            
            </summary>
        </member>
        <member name="P:SPA_NetCore_Foundation.Model.TestModel02.sTest002">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Model.TestModel02.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:SPA_NetCore_Foundation.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation.Program.CreateHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:SPA_NetCore_Foundation.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="F:SPA_NetCore_Foundation.Startup.AuthUrl">
            <summary>
            인증서버 주소
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:SPA_NetCore_Foundation.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SPA_NetCore_Foundation.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:SPA_NetCore_Foundation.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:SwaggerAssist.AuthenticationRequirementsOperationFilter">
            <summary>
            https://github.com/domaindrivendev/Swashbuckle.AspNetCore
            </summary>
        </member>
        <member name="M:SwaggerAssist.AuthenticationRequirementsOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            스웨거용 bearer 체크 필터
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:IdentityServer4_Custom.IdentityServer4.AuthRequest.MyExtensionGrantValidator">
            <summary>
            http://docs.identityserver.io/en/latest/topics/extension_grants.html
            </summary>
        </member>
        <member name="P:IdentityServer4_Custom.IdentityServer4.AuthRequest.MyExtensionGrantValidator.GrantType">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.AuthRequest.MyExtensionGrantValidator.ValidateAsync(IdentityServer4.Validation.ExtensionGrantValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.IdentityServer4.Config">
            <summary>
            0. 'IdentityServer4' 설정
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.Config.GetIdentityResources">
            <summary>
            신원 자원
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.Config.GetApiResources">
            <summary>
            API의 인증 범위를 정의한다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.Config.GetClients">
            <summary>
            클라이언트 접근 범위를 설정한다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.IdentityServer4.TokenProcess">
            <summary>
            토큰 처리 관련 기능들
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.IdentityServer4.TokenProcess.hcAuthClient">
            <summary>
            인증에 사용할  http클라이언트
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.IdentityServer4.TokenProcess.sIdentityServer4_Url">
            <summary>
            IdentityServer4로 구현된 서버 주소
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="sAuthUrl"></param>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.RequestTokenAsync(System.String,System.String)">
            <summary>
            인증서버에 인증을 요청한다.
            </summary>
            <param name="sID"></param>
            <param name="sPassword"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.RefreshTokenAsync(System.String)">
            <summary>
            액세스 토큰 갱신
            </summary>
            <param name="sRefreshToken">리플레시토큰</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.RevocationTokenAsync(System.String)">
            <summary>
            지정된 토큰 제거
            </summary>
            <param name="sRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.IdentityServer4.TokenProcess.UserInfoAsync(System.String)">
            <summary>
            엑세스토큰을 이용하여 유저 정보를 받는다.
            </summary>
            <param name="sAccessToken"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.UserRepository">
            <summary>
            3. 유저 저장소
            유저 정보 및 데이터 엑세스 기능.
            각 프로젝트에 맞게 수정하여 사용한다.
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.ValidateCredentials(System.String,System.String)">
            <summary>
            인증정보가 확인
            </summary>
            <param name="sEmail"></param>
            <param name="sPassword"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.FindById(System.Int32)">
            <summary>
            아이디 검색
            </summary>
            <param name="nID"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.FindByEmail(System.String)">
            <summary>
            이름 검색
            </summary>
            <param name="sEmail"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepository.ToUserRepositoryModel(WebApiAuth.Model.Sign.UserAuthModel)">
            <summary>
            로그인에 사용하는 UserSignInfoModel을
            IdentityServer4_Custom.UserServices.UserRepositoryModel 로 변환한다.
            </summary>
            <param name="insUserDB"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.CustomProfileService">
            <summary>
            4. 'IdentityServerBuilder'에 전달될 프로필 서비스를 만든다.
            유효성 검증이 된경우 토큰에 정보나 요구사항을 추가한다.
            필요한 데이터가 있는 경우 이것을 커스텀 해야한다.
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.UserServices.CustomProfileService.Logger">
            <summary>
            로거
            </summary>
        </member>
        <member name="F:IdentityServer4_Custom.UserServices.CustomProfileService._userRepository">
            <summary>
            전달받은 유저 저장소
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomProfileService.#ctor(IdentityServer4_Custom.UserServices.IUserRepository,Microsoft.Extensions.Logging.ILogger{IdentityServer4_Custom.UserServices.CustomProfileService})">
            <summary>
            커스텀 프로필 서비스 생성
            </summary>
            <param name="userRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomProfileService.GetProfileDataAsync(IdentityServer4.Models.ProfileDataRequestContext)">
            <summary>
            서브젝트아이디에 해당하는 정보를 만든다.
            주의 : 직접 참조만 없을뿐이지 실제론 사용된다.
            경고 : CS1998
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomProfileService.IsActiveAsync(IdentityServer4.Models.IsActiveContext)">
            <summary>
            전달받은 서브젝트아이디가 있는지 확인한다.
            주의 : 직접 참조만 없을뿐이지 실제론 사용된다.
            경고 : CS1998
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.CustomResourceOwnerPasswordValidator">
            <summary>
            5. 전달된 유저정보 유효성 검사
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomResourceOwnerPasswordValidator.#ctor(IdentityServer4_Custom.UserServices.IUserRepository)">
            <summary>
            생성
            </summary>
            <param name="userRepository"></param>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.CustomResourceOwnerPasswordValidator.ValidateAsync(IdentityServer4.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            유효성 검사
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.IUserRepository">
            <summary>
            2. 유저 저장소 인터페이스
            'IdentityServerBuilder'에 전달될 인터페이스
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.IUserRepository.ValidateCredentials(System.String,System.String)">
            <summary>
            자격 증명 확인
            </summary>
            <param name="sSignEmail"></param>
            <param name="sPassword"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.IUserRepository.FindById(System.Int32)">
            <summary>
            아이디로 유저를 찾는다.
            </summary>
            <param name="nID"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.IUserRepository.FindByEmail(System.String)">
            <summary>
            이메일로 유저를 찾는다.
            </summary>
            <param name="sSignEmail"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4_Custom.UserServices.UserRepositoryModel">
            <summary>
            IdentityServer4 인증 정보를 만들기 위한 모델
            </summary>
        </member>
        <member name="P:IdentityServer4_Custom.UserServices.UserRepositoryModel.idUser">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:IdentityServer4_Custom.UserServices.UserRepositoryModel.SignEmail">
            <summary>
            사인인에 사용하는 이메일
            </summary>
        </member>
        <member name="P:IdentityServer4_Custom.UserServices.UserRepositoryModel.Password">
            <summary>
            사인인에 사용하는 비밀번호
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepositoryModel.#ctor">
            <summary>
            기본 값으로 생성
            </summary>
        </member>
        <member name="M:IdentityServer4_Custom.UserServices.UserRepositoryModel.#ctor(System.Int64,System.String)">
            <summary>
            유저 정보를 이용하여 생성
            </summary>
            <param name="idUser"></param>
            <param name="SignEmail"></param>
        </member>
        <member name="T:IdentityServer4.UserServices.ClaimModel">
            <summary>
            클라이언트 정보가 들어있는 Claims 모델
            IdentityServer4
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.client_id">
            <summary>
            클라이언트 아이디
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.auth_time">
            <summary>
            권한 유효 시간
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.id">
            <summary>
            아이디
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.id_int">
            <summary>
            아이디 - long 타입
            </summary>
        </member>
        <member name="P:IdentityServer4.UserServices.ClaimModel.email">
            <summary>
            이메일.
            인증에 사용한 이메일 정보.
            이메일이 아닌경우 고유문자열
            </summary>
        </member>
        <member name="M:IdentityServer4.UserServices.ClaimModel.#ctor">
            <summary>
            기본값으로 생성
            </summary>
        </member>
        <member name="M:IdentityServer4.UserServices.ClaimModel.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            인증 서버에서 넘어온 정보로 생성
            </summary>
            <param name="claims"></param>
        </member>
        <member name="M:IdentityServer4.UserServices.ClaimModel.Set(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            인증 서버에서 넘어온 정보로 초기화
            </summary>
            <param name="claims"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CustomIdentityServerBuilderExtensions">
            <summary>
            6. 'Microsoft.Extensions.DependencyInjection'에 확장 메소드 추가
            'IdentityServerBuilder'에 추가할 종속성을 정의 한다.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CustomIdentityServerBuilderExtensions.AddCustomUserStore(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            저장소에 커스텀 유저를 추가한다.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:ModelDB.Board">
            <summary>
            게시판 기본 정보
            </summary>
        </member>
        <member name="P:ModelDB.Board.idBoard">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.Board.Title">
            <summary>
            게시판 제목
            </summary>
        </member>
        <member name="P:ModelDB.Board.UrlStandard">
            <summary>
            기준 Url
            </summary>
        </member>
        <member name="P:ModelDB.Board.BoardState">
            <summary>
            보드 상태
            </summary>
        </member>
        <member name="P:ModelDB.Board.BoardFaculty">
            <summary>
            게시판 기능 설정
            </summary>
        </member>
        <member name="P:ModelDB.Board.AuthorityDefault">
            <summary>
            권한이 없을때 사용하는 기본권한
            </summary>
        </member>
        <member name="P:ModelDB.Board.ShowCount">
            <summary>
            한페이지 컨탠츠 수.
            BoardFaculty의 ShowCount_Server를 사용할때 사용할 정보.
            </summary>
        </member>
        <member name="P:ModelDB.Board.idBoardGroup">
            <summary>
            소속 그룹 아이디
            </summary>
        </member>
        <member name="P:ModelDB.Board.CreateDate">
            <summary>
            작성일
            </summary>
        </member>
        <member name="P:ModelDB.Board.Memo">
            <summary>
            설명
            </summary>
        </member>
        <member name="T:ModelDB.BoardAuthority">
            <summary>
            게시판 개별권한.
            유저 기준으로
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.idBoardAuthority">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.idBoard">
            <summary>
            연결된 게시판의 고유번호
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.idUser">
            <summary>
            소유 유저
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.Authority">
            <summary>
            가지고 있는 권한.
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.AuthState">
            <summary>
            권한 상태
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.Memo">
            <summary>
            설명
            </summary>
        </member>
        <member name="P:ModelDB.BoardAuthority.EditDate">
            <summary>
            수정 날짜
            </summary>
        </member>
        <member name="T:ModelDB.BoardCategory">
            <summary>
            게시판별 카테고리.
            인덱스 1은 무조건 전체 표시용이다.
            </summary>
        </member>
        <member name="P:ModelDB.BoardCategory.idBoardCategory">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.BoardCategory.idBoard">
            <summary>
            연결된 게시판
            </summary>
        </member>
        <member name="P:ModelDB.BoardCategory.Title">
            <summary>
            카테고리 타이틀
            </summary>
        </member>
        <member name="P:ModelDB.BoardCategory.Memo">
            <summary>
            설명
            </summary>
        </member>
        <member name="T:ModelDB.BoardContent">
            <summary>
            게시물 상세 정보
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.idBoardContent">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.idBoard">
            <summary>
            연결된 보드 키
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.idBoardPost">
            <summary>
            연결된 포스트 번호
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.Content">
            <summary>
            내용
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.WriteIP">
            <summary>
            작성시 ip
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.EditIP">
            <summary>
            수정시 ip
            </summary>
        </member>
        <member name="P:ModelDB.BoardContent.FileList">
            <summary>
            본문에 가지고 있는 파일 리스트.
            구분자로 구분되어 있는 문자열이다.
            </summary>
        </member>
        <member name="T:ModelDB.BoardGroup">
            <summary>
            
            인덱스 1은 무조건 전체 표시용이다.
            </summary>
        </member>
        <member name="P:ModelDB.BoardGroup.idBoardGroup">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.BoardGroup.Title">
            <summary>
            카테고리 타이틀
            </summary>
        </member>
        <member name="P:ModelDB.BoardGroup.Memo">
            <summary>
            설명
            </summary>
        </member>
        <member name="T:ModelDB.BoardPost">
            <summary>
            게시물 기본 정보
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.idBoardPost">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.idBoard">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.idBoardCategory">
            <summary>
            카테고리
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.Title">
            <summary>
            제목
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.idUser">
            <summary>
            소유 유저
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.idUser_Forwarding">
            <summary>
            전달한 유저.
            이 글을 다른 사람이 작성해서 소유 유저에게 전달한다.
            0이거나 없으면 소유자가 작성한 글이다.
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.ViewCount">
            <summary>
            조회수
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.ViewCountNone">
            <summary>
            조회수(비회원 조회수)
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.ReplyCount">
            <summary>
            댓글 갯수
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.ThumbnailUrl">
            <summary>
            썸네일이 있으면 이미지 주소.
            파일명은 빠저있다.
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.PostState">
            <summary>
            포스트 상태
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.WriteDate">
            <summary>
            작성일
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.EditDate">
            <summary>
            수정일
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.DeleteDate">
            <summary>
            삭제/블럭일
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.WriteIP">
            <summary>
            작성시 ip
            </summary>
        </member>
        <member name="P:ModelDB.BoardPost.EditIP">
            <summary>
            수정시 ip
            </summary>
        </member>
        <member name="T:ModelDB.BoardPostReply">
            <summary>
            게시물의 댓글
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.idBoardPostReply">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.idBoard">
            <summary>
            연결된 보드 아이디
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.idBoardPost">
            <summary>
            연결된 포스트 아이디
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.idBoardPostReply_Re">
            <summary>
            다른 리플을 대상으로 했을 경우 해당 리플의 아이디.
            없으면 0.
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.idBoardPostReply_ReParent">
            <summary>
            다른 리플을 대상으로 했을 경우 최상위 댓글 아이디.
            최상위에 idBoardReply_Re가 0인 댓글을 찾아 넣어준다.
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.ReReplyCount">
            <summary>
            이 댓글 아래에 있는 댓글 개수
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.idUser">
            <summary>
            작성자 아이디
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.ReplyState">
            <summary>
            리플 상태
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.Title">
            <summary>
            타이틀
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.Content">
            <summary>
            내용
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.WriteDate">
            <summary>
            작성일
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.EditDate">
            <summary>
            수정일
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.DeleteDate">
            <summary>
            삭제/블럭일
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.WriteIP">
            <summary>
            작성시 ip
            </summary>
        </member>
        <member name="P:ModelDB.BoardPostReply.EditIP">
            <summary>
            수정시 ip
            </summary>
        </member>
        <member name="T:ModelDB.FileInfo">
            <summary>
            파일 
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.idFileList">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.FileName">
            <summary>
            원래 파일 이름
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.Ext">
            <summary>
            확장자
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.Size">
            <summary>
            파일 크기
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.FileDir">
            <summary>
            서버 로컬의 파일 위치
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.FileUrl">
            <summary>
            저정되어 있는 파일의 Url
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.Description">
            <summary>
            파일에 대한 설명
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.EditorDivision">
            <summary>
            에디터에서 파일을 구분하기위해 사용한 구분값.
            에디터가 아닌곳에서는 아직 사용하지 않는다.
            </summary>
        </member>
        <member name="P:ModelDB.FileInfo.FileState">
            <summary>
            파일의 상태정보
            </summary>
        </member>
        <member name="T:ModelDB.SpaNetCoreFoundationContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModelDB.SpaNetCoreFoundationContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.Board">
            <summary>
            게시판 정보
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.BoardPost">
            <summary>
            게시물
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.BoardAuthority">
            <summary>
            게시판 개별권한
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.BoardCategory">
            <summary>
            게시판 카테고리 정보
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.BoardContent">
            <summary>
            게시물 내용
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.BoardGroup">
            <summary>
            게시판 그룹
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.BoardPostReply">
            <summary>
            게시물 댓글
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.FileInfo">
            <summary>
            파일 정보
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.User">
            <summary>
            유저 사인인 정보
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.UserInfo">
            <summary>
            유저 정보중 자주쓰는 정보
            </summary>
        </member>
        <member name="P:ModelDB.SpaNetCoreFoundationContext.UserSignIn">
            <summary>
            사용자 사인인 리스트
            </summary>
        </member>
        <member name="M:ModelDB.SpaNetCoreFoundationContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:ModelDB.User">
            <summary>
            유저 사인인 정보.
            유저기준 정보임.
            </summary>
        </member>
        <member name="P:ModelDB.User.idUser">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.User.SignEmail">
            <summary>
            사인인에 사용하는 이메일
            </summary>
        </member>
        <member name="P:ModelDB.User.Password">
            <summary>
            비밀번호
            </summary>
        </member>
        <member name="T:ModelDB.UserInfo">
            <summary>
            유저 사인인 정보.
            유저기준 정보임.
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.idUserInfo">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.idUser">
            <summary>
            연결된 유저 고유키
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.ViewName">
            <summary>
            표시용 이름
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.SignUpDate">
            <summary>
            가입일
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.SignInDate">
            <summary>
            직접 로그인한 마지막 날짜
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.RefreshDate">
            <summary>
            토큰으로 로그인한 마지막 날짜
            </summary>
        </member>
        <member name="P:ModelDB.UserInfo.PlatformInfo">
            <summary>
            접속 플랫폼
            </summary>
        </member>
        <member name="T:ModelDB.UserSignIn">
            <summary>
            유저 사인인 한 유저의 정보.
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.idUserSignIn">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.idUser">
            <summary>
            연결된 User.idUser
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.RefreshToken">
            <summary>
            리플레시 토큰
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.SignInDate">
            <summary>
            직접 로그인한 시간
            </summary>
        </member>
        <member name="P:ModelDB.UserSignIn.RefreshDate">
            <summary>
            토큰 갱신 시간
            </summary>
        </member>
        <member name="T:ModelDB.BoardAuthorityStateType">
            <summary>
            게시판 권한 상태 구분
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityStateType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityStateType.Use">
            <summary>
            정상 사용
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityStateType.Stop">
            <summary>
            정지
            </summary>
        </member>
        <member name="T:ModelDB.BoardAuthorityType">
            <summary>
            게시판 권한 구분
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.ReadList">
            <summary>
            리스트 보기 권한.
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.ReadListNonMember">
            <summary>
            리스트 보기 권한.(비회원)
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.Read">
            <summary>
            게시물 읽기 권한.
            리스트 보기권한이 없는 상태로 이 권한이 있으면
            직접 주소를 넣어야 접근 가능하다.
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.ReadNonMember">
            <summary>
            비회원 게시물 읽기 가능
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.Write">
            <summary>
            쓰기 권한.
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.WriteReply">
            <summary>
            댓글 쓰기 권한
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.WriteNonMember">
            <summary>
            비회원은 쓰기 가능
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.WriteReplyNonMember">
            <summary>
            비회원은 댓글 쓰기 가능
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.Delete">
            <summary>
            지우기 권한.
            자기 글만 지울 수 있는 권한이다.
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.DeleteOther">
            <summary>
            다른 사람 글을 지울수 있는지 권한
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.Edit">
            <summary>
            수정 권한.
            자기글만 수정할 수 있다.
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.EditOther">
            <summary>
            다른사람 글을 수정할 수 있는 권한.
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.NoticeAll">
            <summary>
            공지 권한 - 전체글 작성권한
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.NoticeGroup">
            <summary>
            공지 권한 - 게시판 그룹 공지 작성권한
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.NoticeBoard">
            <summary>
            공지 권한 - 게시판 공지 작성 권한
            </summary>
        </member>
        <member name="F:ModelDB.BoardAuthorityType.All">
            <summary>
            전체 권한
            </summary>
        </member>
        <member name="T:ModelDB.BoardFacultyType">
            <summary>
            게시판 기능 옵션 구분
            </summary>
        </member>
        <member name="F:ModelDB.BoardFacultyType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.BoardFacultyType.ShowCount_Server">
            <summary>
            한페이지 컨탠츠 수 - 서버 데이터 사용.
            이 값이 없으면 유저 데이터 사용
            디폴트.
            </summary>
        </member>
        <member name="F:ModelDB.BoardFacultyType.ReplyList">
            <summary>
            리플 리스트를 표시할지 여부
            </summary>
        </member>
        <member name="F:ModelDB.BoardFacultyType.MyList">
            <summary>
            자기리스트만 보이는 게시판인지 여부
            </summary>
        </member>
        <member name="F:ModelDB.BoardFacultyType.Favorites">
            <summary>
            즐겨찾기 기능 허용 여부
            </summary>
        </member>
        <member name="F:ModelDB.BoardFacultyType.All">
            <summary>
            전체 권한
            </summary>
        </member>
        <member name="T:ModelDB.BoardPostReplyStateType">
            <summary>
            리플 상태값
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostReplyStateType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostReplyStateType.Normal">
            <summary>
            정상
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostReplyStateType.Delete">
            <summary>
            삭제 함.
            데몬으로 영구 삭제 예약
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostReplyStateType.Block">
            <summary>
            관리자에 의해 블럭됨
            </summary>
        </member>
        <member name="T:ModelDB.BoardPostStateType">
            <summary>
            게시판 상태
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.Normal">
            <summary>
            정상
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.Delete">
            <summary>
            삭제 함.
            데몬으로 영구 삭제 예약
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.Block">
            <summary>
            관리자에 의해 블럭됨
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.Notice_All">
            <summary>
            전체 공지
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.Notice_Group">
            <summary>
            그룹 공지
            </summary>
        </member>
        <member name="F:ModelDB.BoardPostStateType.Notice_Board">
            <summary>
            해당 게시판 공지
            </summary>
        </member>
        <member name="T:ModelDB.BoardStateType">
            <summary>
            게시판 상태
            </summary>
        </member>
        <member name="F:ModelDB.BoardStateType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.BoardStateType.Use">
            <summary>
            사용중
            </summary>
        </member>
        <member name="F:ModelDB.BoardStateType.NotUse">
            <summary>
            사용안함.
            </summary>
        </member>
        <member name="T:ModelDB.FileStateType">
            <summary>
            파일 상태 타입
            </summary>
        </member>
        <member name="F:ModelDB.FileStateType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:ModelDB.FileStateType.Normal">
            <summary>
            정상
            </summary>
        </member>
        <member name="F:ModelDB.FileStateType.DeleteReservation">
            <summary>
            삭제 예약.
            데몬이돌면서 제거한다.
            </summary>
        </member>
        <member name="T:ApiModel.ApiResultBaseModel">
            <summary>
            API 결과 공통 베이스.
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultBaseModel.InfoCode">
            <summary>
            실패시 전달한 코드
            0 : 성공.
            다른 값은 모두 실패
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultBaseModel.Message">
            <summary>
            전달할 메시지
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultBaseModel.SuccessString">
            <summary>
            성공했을때 문자
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.#ctor">
            <summary>
            기본 생성.
            InfoCode가 "0"로 초기화됨
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.#ctor(System.String,System.String)">
            <summary>
            인포코드와 메시지를 넣고 생성
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.Reset">
            <summary>
            성공으로 초기화한다.
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.TypeSet(ApiModel.ApiResultType)">
            <summary>
            타입 세팅
            </summary>
            <param name="typeApiResult"></param>
        </member>
        <member name="M:ApiModel.ApiResultBaseModel.IsSuccess">
            <summary>
            InfoCode값이 성공값인지 여부
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApiModel.ApiResultFailModel">
            <summary>
            api 실패시 전달할 모델(자바스크립 전달용)
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultFailModel.#ctor">
            <summary>
            기본 초기화
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultFailModel.#ctor(System.String,System.String)">
            <summary>
            인포코드와 메시지를 넣고 생성
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="T:ApiModel.ApiResultObjectModel">
            <summary>
            스웨거에 노출시키지 않고 모델을 리턴할때 사용한다.
            테스트용으로 사용해도된다.(매번 새로운 모델을 만들기 힘들기 때문)
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultObjectModel.ResultObject">
            <summary>
            전달할 오브젝트
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultObjectModel.#ctor">
            <summary>
            기본 생성
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultObjectModel.#ctor(System.Object)">
            <summary>
            리턴할 모델 지정하여 생성
            </summary>
            <param name="objResult"></param>
        </member>
        <member name="M:ApiModel.ApiResultObjectModel.#ctor(System.String,System.String)">
            <summary>
            인포코드와 메시지를 넣고 생성
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="T:ApiModel.ApiResultReady">
            <summary>
            api요청을 처리할때 요청결과처리를 공통화 하는 클래스.
            ApiResultFailModel를 공통으로 리턴하기 위해 베이스를 가지고 있다.
            결과 출력용으로 데이터는 외부로 부터 받아야 한다.
            외부에서는 ToResult를 이용하여 API 전달용 개체를 받는다.
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.ThisCB">
            <summary>
            컨트롤러베이스의 기능을 쓰기위한 개체
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.ResultObject">
            <summary>
            전달받은 결과 오브젝트
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.Success">
            <summary>
            성공 여부.
            알수 없는 에러가 났을때 처리하기위한 용도.
            알수 있는 에러는 이값을을 true로 해둔다.
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.InfoCode">
            <summary>
            실패시 전달한 코드
            0 : 성공.
            다른 값은 모두 실패
            </summary>
        </member>
        <member name="P:ApiModel.ApiResultReady.Message">
            <summary>
            전달할 메시지
            </summary>
        </member>
        <member name="M:ApiModel.ApiResultReady.#ctor(Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            API의 처음부분에서 선언한다.
            'ApiResultBaseModel'로 생성합니다.
            </summary>
            <param name="cbThis">컨트롤러 기능을 사용하기위한 인스턴스</param>
        </member>
        <member name="M:ApiModel.ApiResultReady.#ctor(Microsoft.AspNetCore.Mvc.ControllerBase,ApiModel.ApiResultBaseModel)">
            <summary>
            API의 처음부분에서 선언한다.
            </summary>
            <param name="cbThis">컨트롤러 기능을 사용하기위한 인스턴스</param>
            <param name="arModel">리턴에 사용할 모델</param>
        </member>
        <member name="M:ApiModel.ApiResultReady.ApiResultInfoSet(System.String,System.String)">
            <summary>
            Api 결과 정보 저장
            </summary>
            <param name="sInfoCode"></param>
            <param name="sMessage"></param>
        </member>
        <member name="M:ApiModel.ApiResultReady.IsSuccess">
            <summary>
            InfoCode값이 성공값인지 여부
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiModel.ApiResultReady.ToResult">
            <summary>
            API끝에서 호출한다.
            ApiResult를 생성하여 리턴해 준다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApiModel.ApiResultReady.ToResult(System.Object)">
            <summary>
            API끝에서 호출하여 'ObjectResult'를 생성하여 리턴해 준다.
            만들어지는 결과의 ApiResultBaseModel데이터는 this 기준이다.
            </summary>
            <param name="objResultData">전달할 모델</param>
            <returns></returns>
        </member>
        <member name="T:ApiModel.ApiResultType">
            <summary>
            자주쓰는 API 결과 타입
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultType.None">
            <summary>
            성공
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultType.PermissionCheckError">
            <summary>
            권한 체크중 오류 발생
            </summary>
        </member>
        <member name="F:ApiModel.ApiResultType.TargetFindError">
            <summary>
            대상을 찾지 못했다.
            </summary>
        </member>
        <member name="T:Boards.Model.BoardAuthCheckType">
            <summary>
            게시판 권한 체크 타입
            </summary>
        </member>
        <member name="F:Boards.Model.BoardAuthCheckType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:Boards.Model.BoardAuthCheckType.Success">
            <summary>
            성공
            </summary>
        </member>
        <member name="F:Boards.Model.BoardAuthCheckType.NoBoardId">
            <summary>
            보드 아이디가 없다.
            </summary>
        </member>
        <member name="F:Boards.Model.BoardAuthCheckType.NotFindBoard">
            <summary>
            게시판을 찾지 못했다.
            </summary>
        </member>
        <member name="F:Boards.Model.BoardAuthCheckType.NotUseBoard">
            <summary>
            게시판을 사용할 수 없는 상테다.
            </summary>
        </member>
        <member name="T:Boards.Model.BoardCommonSortType">
            <summary>
            게시판 리스트 정렬 방향
            </summary>
        </member>
        <member name="F:Boards.Model.BoardCommonSortType.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="F:Boards.Model.BoardCommonSortType.Asc">
            <summary>
            오름 차순
            1 -> 2 -> 3 (↗)
            </summary>
        </member>
        <member name="F:Boards.Model.BoardCommonSortType.Desc">
            <summary>
            내림 차순
            3 -> 2 -> 1 (↘)
            </summary>
        </member>
        <member name="T:Boards.Model.BoardInterface">
            <summary>
            게시판 리스트 공통 맴버
            </summary>
        </member>
        <member name="P:Boards.Model.BoardInterface.TotalCount">
            <summary>
            검색된 게시물 숫자
            </summary>
        </member>
        <member name="P:Boards.Model.BoardInterface.PageNumber">
            <summary>
            지금 보고 있는 페이지 번호
            </summary>
        </member>
        <member name="P:Boards.Model.BoardInterface.ShowCount">
            <summary>
            한페이지의 컨탠츠 개수
            </summary>
        </member>
        <member name="T:Boards.Model.BoardItemType">
            <summary>
            게시판의 리스트 아이템의 타입
            </summary>
        </member>
        <member name="F:Boards.Model.BoardItemType.None">
            <summary>
            없음. 기본
            </summary>
        </member>
        <member name="F:Boards.Model.BoardItemType.NoticeAll">
            <summary>
            공지
            </summary>
        </member>
        <member name="F:Boards.Model.BoardItemType.NoticeGroup">
            <summary>
            공지(그룹)
            </summary>
        </member>
        <member name="F:Boards.Model.BoardItemType.NoticeBoard">
            <summary>
            공지(게시판)
            </summary>
        </member>
        <member name="T:Boards.Model.BoardAuthItemModel">
            <summary>
            게시판 개별 권한 정보 아이템
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.idBoardAuthority">
            <summary>
            게시판 권한 고유 아이디
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.idBoard">
            <summary>
            연결된 게시판의 고유번호
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.idUser">
            <summary>
            소유 유저
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.Authority">
            <summary>
            가지고 있는 권한.
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.AuthState">
            <summary>
            권한 상태
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.SignEmail">
            <summary>
            사인인 이메일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.UserName">
            <summary>
            소유 유저 이름
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.Memo">
            <summary>
            설명
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthItemModel.EditDate">
            <summary>
            수정 날짜
            </summary>
        </member>
        <member name="M:Boards.Model.BoardAuthItemModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Boards.Model.BoardAuthItemModel.#ctor(ModelDB.BoardAuthority)">
            <summary>
            
            </summary>
            <param name="baData"></param>
        </member>
        <member name="T:Boards.Model.BoardAuthListResultModel">
            <summary>
            게시판 권한 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardAuthListResultModel.List">
            <summary>
            해당 게시판에 연결된 권한 리스트
            </summary>
        </member>
        <member name="T:Boards.Model.BoardCategoryModel">
            <summary>
            게시판 카테고리를 유저에게 제공하기위한 모델
            </summary>
        </member>
        <member name="P:Boards.Model.BoardCategoryModel.idBoardCategory">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:Boards.Model.BoardCategoryModel.Title">
            <summary>
            카테고리 타이틀
            </summary>
        </member>
        <member name="M:Boards.Model.BoardCategoryModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Boards.Model.BoardCategoryModel.#ctor(ModelDB.BoardCategory)">
            <summary>
            카테고리 데이터를 이용하여 생성
            </summary>
            <param name="dataBoardCategory"></param>
        </member>
        <member name="T:Boards.Model.BoardListCallModel">
            <summary>
            유저에게 미리 보낼 게시판 정보 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListCallModel.nBoardId">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListCallModel.nPostView">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListCallModel.nShowCount">
            <summary>
            한화면에 보일 컨탠츠 개수.
            사용자 호출이 허용된 게시판만 사용가능.
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListCallModel.nPageNumber">
            <summary>
            보려고하는 페이지 번호
            </summary>
        </member>
        <member name="T:Boards.Model.BoardListInfoModel">
            <summary>
            게시판 리스트 정보.
            게시판의 기본 연결 주소를 유저에게 전달하기위한 모델이다.
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListInfoModel.idBoard">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListInfoModel.Title">
            <summary>
            게시판 이름
            </summary>
        </member>
        <member name="P:Boards.Model.BoardListInfoModel.UrlStandard">
            <summary>
            기준 Url
            </summary>
        </member>
        <member name="M:Boards.Model.BoardListInfoModel.#ctor(ModelDB.Board)">
            <summary>
            
            </summary>
            <param name="dbBoard"></param>
        </member>
        <member name="T:Boards.Model.BoardPostCreateResultModel">
            <summary>
            게시물 작성 요청 완료용
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostCreateResultModel.PostID">
            <summary>
            선택된 포스트 아이디
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostCreateViewResultModel">
            <summary>
            게시물 작성 화면 요청시 리턴용
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostCreateViewResultModel.BoardCategory">
            <summary>
            이 게시판이 가지고 있는 카테고리
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostCreateViewResultModel.NoticeAll">
            <summary>
            공지 권한 - 전체
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostCreateViewResultModel.NoticeGroup">
            <summary>
            공지 권한 - 그룹
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostCreateViewResultModel.NoticeBoard">
            <summary>
            공지 권한 - 게시판
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostEditResultModel">
            <summary>
            게시물 수정 요청시 리턴용
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.idBoardPost">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.idBoard">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.idBoardCategory">
            <summary>
            카테고리
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.Title">
            <summary>
            제목
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.idUser">
            <summary>
            소유 유저
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.ViewCount">
            <summary>
            조회수
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.PostState">
            <summary>
            포스트 상태
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.WriteDate">
            <summary>
            작성일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.EditDate">
            <summary>
            수정일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.UserName">
            <summary>
            유저 이름
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.Content">
            <summary>
            내용
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.FileInfoList">
            <summary>
            파일 정보 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.BoardCategory">
            <summary>
            이 게시판이 가지고 있는 카테고리
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.NoticeAll">
            <summary>
            공지 권한 - 전체
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.NoticeGroup">
            <summary>
            공지 권한 - 그룹
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostEditResultModel.NoticeBoard">
            <summary>
            공지 권한 - 게시판
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostEditResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostEditResultModel.#ctor(ModelDB.BoardPost,ModelDB.UserInfo,ModelDB.BoardContent)">
            <summary>
            
            </summary>
            <param name="bpData"></param>
            <param name="uiData"></param>
            <param name="bcData"></param>
        </member>
        <member name="M:Boards.Model.BoardPostEditResultModel.Reset(ModelDB.BoardPost,ModelDB.UserInfo,ModelDB.BoardContent)">
            <summary>
            
            </summary>
            <param name="bpData"></param>
            <param name="uiData"></param>
            <param name="bcData"></param>
        </member>
        <member name="T:Boards.Model.BoardPostListModel">
            <summary>
            게시물 리스트용 아이템
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.idBoardPost">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.idBoard">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.idBoardCategory">
            <summary>
            카테고리
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.Title">
            <summary>
            제목
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.idUser">
            <summary>
            소유 유저
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.idUser_Forwarding">
            <summary>
            전달한 유저.
            이 글을 다른 사람이 작성해서 소유 유저에게 전달한다.
            0이거나 없으면 소유자가 작성한 글이다.
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.ViewCount">
            <summary>
            조회수
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.ViewCountNone">
            <summary>
            조회수(비회원)
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.ReplyCount">
            <summary>
            댓글 갯수
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.ThumbnailUrl">
            <summary>
            썸네일이 있는지 여부
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.WriteDate">
            <summary>
            작성일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.EditDate">
            <summary>
            수정일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.UserName">
            <summary>
            작성자 이름
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.UserName_Forwarding">
            <summary>
            포워딩 전달
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.PostState">
            <summary>
            포스트 상태
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostListModel.ItemType">
            <summary>
            아이템 타입
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostListModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostListModel.#ctor(ModelDB.BoardPost,ModelDB.UserInfo,ModelDB.UserInfo,Boards.Model.BoardItemType)">
            <summary>
            
            </summary>
            <param name="bpData"></param>
            <param name="uiData"></param>
            <param name="uiData_Forwarding"></param>
            <param name="typeBoardItem"></param>
        </member>
        <member name="M:Boards.Model.BoardPostListModel.Reset(ModelDB.BoardPost,ModelDB.UserInfo,ModelDB.UserInfo,Boards.Model.BoardItemType)">
            <summary>
            
            </summary>
            <param name="bpData"></param>
            <param name="uiData"></param>
            <param name="uiData_Forwarding"></param>
            <param name="typeBoardItem"></param>
        </member>
        <member name="T:Boards.Model.BoardPostReplyCreateResultModel">
            <summary>
            리플 작성 완료 리절트 모델
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostReplyCreateResultModel.NewItem">
            <summary>
            완성된 리플 개체
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostReplyRelationTreeModel">
            <summary>
            댓글 관계정보
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostReplyRelationTreeModel.idBoardPostReply">
            <summary>
            댓글 고유번호
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostReplyRelationTreeModel.idBoardPostReply_Re">
            <summary>
            댓글 대상
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostReplyRelationTreeModel.Depth">
            <summary>
            깊이
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostResultModel">
            <summary>
            게시물 리스트 정보
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostResultModel.List">
            <summary>
            검색된 게시물 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostResultModel.idBoard">
            <summary>
            지정한 보드 id
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostResultModel.idBoardPost">
            <summary>
            선택한 포스트 id
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostResultModel.TotalCount">
            <summary>
            소속된 보드의 게시물 숫자
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostResultModel.PageNumber">
            <summary>
            지금 보고 있는 페이지 번호
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostResultModel.ShowCount">
            <summary>
            한페이지의 컨탠츠 개수
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostSummaryResultModel">
            <summary>
            요약 게시판 게시물 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostSummaryResultModel.List">
            <summary>
            게시물 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostSummaryResultModel.BoardTitle">
            <summary>
            게시판 제목
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostViewReplyModel">
            <summary>
            게시물 보기시 댓글 아이템 정보
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewReplyModel.UserName">
            <summary>
            유저 이름
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostViewReplyModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostViewReplyModel.#ctor(ModelDB.UserInfo,ModelDB.BoardPostReply)">
            <summary>
            
            </summary>
            <param name="uiData"></param>
            <param name="bcData"></param>
        </member>
        <member name="M:Boards.Model.BoardPostViewReplyModel.#ctor(ModelDB.UserInfo,ModelDB.BoardPostReply,System.Boolean)">
            <summary>
            
            </summary>
            <param name="uiData"></param>
            <param name="bcData"></param>
            <param name="bType"></param>
        </member>
        <member name="M:Boards.Model.BoardPostViewReplyModel.Reset(ModelDB.UserInfo,ModelDB.BoardPostReply)">
            <summary>
            
            </summary>
            <param name="uiData"></param>
            <param name="bcData"></param>
        </member>
        <member name="M:Boards.Model.BoardPostViewReplyModel.Reset_ViewType(ModelDB.UserInfo,ModelDB.BoardPostReply)">
            <summary>
            리플의 상태값에 따라 다른 정보를 준다.
            </summary>
            <param name="uiData"></param>
            <param name="bcData"></param>
        </member>
        <member name="T:Boards.Model.BoardPostViewReplyResultModel">
            <summary>
            게시물 보기시 댓글 리스트 전달용
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewReplyResultModel.List">
            <summary>
            리플 리스트
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewReplyResultModel.WriteReply">
            <summary>
            리플 작성 권한이 있는지 여부
            </summary>
        </member>
        <member name="T:Boards.Model.BoardPostViewResultModel">
            <summary>
            게시물 보기용 모델
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.idBoardPost">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.idBoard">
            <summary>
            소속 보드
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.idBoardCategory">
            <summary>
            카테고리
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.Title">
            <summary>
            제목
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.idUser">
            <summary>
            소유 유저
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.idUser_Forwarding">
            <summary>
            전달한 유저.
            이 글을 다른 사람이 작성해서 소유 유저에게 전달한다.
            0이거나 없으면 소유자가 작성한 글이다.
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.ViewCount">
            <summary>
            조회수
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.ViewCountNone">
            <summary>
            조회수(비회원)
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.WriteDate">
            <summary>
            작성일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.EditDate">
            <summary>
            수정일
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.UserName">
            <summary>
            유저 이름
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.UserName_Forwarding">
            <summary>
            포워딩 유저 이름
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.Content">
            <summary>
            내용
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.EditAuth">
            <summary>
            수정권한이 있는지 여부
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.DeleteAuth">
            <summary>
            삭제권한이 있는지 여부
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.ReplyList">
            <summary>
            리플 리스트 표시 여부
            </summary>
        </member>
        <member name="P:Boards.Model.BoardPostViewResultModel.ReplyWrite">
            <summary>
            리플 쓰기 권한이 있는지 여부
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostViewResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Boards.Model.BoardPostViewResultModel.#ctor(ModelDB.BoardPost,ModelDB.UserInfo,ModelDB.UserInfo,ModelDB.BoardContent)">
            <summary>
            
            </summary>
            <param name="bpData"></param>
            <param name="uiData"></param>
            <param name="uiData_Forwarding"></param>
            <param name="bcData"></param>
        </member>
        <member name="M:Boards.Model.BoardPostViewResultModel.Reset(ModelDB.BoardPost,ModelDB.UserInfo,ModelDB.UserInfo,ModelDB.BoardContent)">
            <summary>
            
            </summary>
            <param name="bpData"></param>
            <param name="uiData"></param>
            <param name="uiData_Forwarding"></param>
            <param name="bcData"></param>
        </member>
        <member name="T:FileList.Model.FileInfoModel">
            <summary>
            파일 정보 모델
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Name">
            <summary>
            파일 이름
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Extension">
            <summary>
            파일 확장자
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Size">
            <summary>
            파일 크기
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Type">
            <summary>
            파일의 타입 정보
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Description">
            <summary>
            파일에 대한 설명
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.EditorDivision">
            <summary>
            에디터에서 사용될 파일 구분값
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.BinaryIs">
            <summary>
            바이너리 정보를 사용할지 여부.
            이것이 true이면 동적으로 바이너리 정보를 읽어 미리보기이미지로 출력하게 된다.
            이미 처리된 데이터인경우 이것이 false가 되어야 한다.
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.BinaryReadyIs">
            <summary>
            바이너리 정보를 사용할때 바이너리 데이터가 준비가 끝났는지 여부
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Binary">
            <summary>
            로컬파일인 경우 파일의 바이너리 정보.
            base64로 들어온다.
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.idFile">
            <summary>
            파일이 업로드되어 있을때 고유 번호
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Url">
            <summary>
            파일이 업로드 되어 있는 상태에 가지고 있는
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Thumbnail">
            <summary>
            썸네일 여부
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Edit">
            <summary>
             수정여부
            </summary>
        </member>
        <member name="P:FileList.Model.FileInfoModel.Delete">
            <summary>
            삭제여부
            </summary>
        </member>
        <member name="M:FileList.Model.FileInfoModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FileList.Model.FileInfoModel.#ctor(ModelDB.FileInfo)">
            <summary>
            파일 리스트 DB를 받아 변환한다.
            </summary>
            <param name="flData"></param>
        </member>
        <member name="T:WebApiAuth.Model.Sign.SignInResultModel">
            <summary>
            사인인 성공시 전달할 모델
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.idUser">
            <summary>
            유저의 고유 아이디
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.Email">
            <summary>
            이메일
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.ViewName">
            <summary>
            표시 이름
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.access_token">
            <summary>
            엑세스 토큰
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInResultModel.refresh_token">
            <summary>
            리플레시 토큰
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.SignInResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:WebApiAuth.Model.Sign.SignInSimpleResultModel">
            <summary>
            사인인 성공시 전달할 모델
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInSimpleResultModel.idUser">
            <summary>
            유저의 고유 아이디
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInSimpleResultModel.Email">
            <summary>
            이메일
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.SignInSimpleResultModel.ViewName">
            <summary>
            표시 이름
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.SignInSimpleResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:WebApiAuth.Model.Sign.UserAuthModel">
            <summary>
            IdentityServer4 인증 정보를 만들기 위한 모델
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.UserAuthModel.idUser">
            <summary>
            고유키
            </summary>
        </member>
        <member name="P:WebApiAuth.Model.Sign.UserAuthModel.SignEmail">
            <summary>
            사인인에 사용하는 이메일
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.UserAuthModel.#ctor">
            <summary>
            기본 값으로 생성
            </summary>
        </member>
        <member name="M:WebApiAuth.Model.Sign.UserAuthModel.#ctor(ModelDB.User)">
            <summary>
            유저 정보를 이용하여 생성
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:WebApiAuth.Model.Sign.UserAuthModel.ManagerAuth_Set(ModelDB.User)">
            <summary>
            유저 정보 저장
            </summary>
            <param name="user"></param>
        </member>
    </members>
</doc>
